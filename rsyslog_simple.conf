##################
# Global Options #
##################

$PreserveFQDN on
$CreateDirs on
# Additionally we can set permissions
#$DirOwner user_here
#$DirGroup group_here
#$FileOwner user_here
#$FileGroup group_here
#$umask 0000
#$DirCreateMode 0755
#$FileCreateMode 0755

###########
# Sources #
###########

# We want to setup a queue for incoming messages
main_queue(
	queue.size="1000000"
	queue.debatchsize="1000"
	queue.workerthreads="2")

# Load our listeners
module(load="imtcp" MaxSessions="5000")
module(load="imudp")

# Rsyslog stats logging
module(
        load="impstats"
        interval="60"
        ruleset="r_Rsyslog_stats"
        log.syslog="on"
)

# Setup our listening ports and bind them to a ruleset
# Additional ports should be used when possible - Filtering is much easier
input(type="imudp" port="514" ruleset="f_remote_all")
input(type="imtcp" port="514" ruleset="f_remote_all")
input(type="imudp" port="1514" ruleset="f_firewall")
input(type="imtcp" port="1514" ruleset="f_firewall")
# BlueCoat isn't syslog, it's just TCP but rsyslog can receive this data with some tweaking
# This is commented out for now, but if you utilize BlueCoat, it may come in handy for you...
# input(type="imtcp" port="1526" ruleset="r_BlueCoat" SupportOctetCountedFraming="off")

################
# Destinations #
################

template(name="d_catch_all" type="string" string="/var/log/remote_syslog/catch_all/%FROMHOST%/%$YEAR%-%$MONTH%-%$DAY%.log")
template(name="d_firewall_log" type="string" string="/var/log/remote_syslog/firewall/%FROMHOST%/%$YEAR%-%$MONTH%-%$DAY%.log")
template(name="d_BlueCoat_log" type="string" string="/var/log/remote_syslog/bluecoat/%FROMHOST%/%$YEAR%-%$MONTH%-%$DAY%.log")
# Rsyslog_stats
template(name="d_Rsyslog_stats" type="string" string="/opt/syslog_data/%$YEAR%-%$MONTH%-%$DAY%/Rsyslog_stats/%FROMHOST%/%$HOUR%-rsyslog_stats.log")

##############
# Set Output #
##############

# We can setup as many rulesets as needed.
ruleset(name="f_remote_all" queue.type="LinkedList" queue.size="100000") {
	# We can use rainerscript to filter within a ruleset
	# Additional if statements can be utilized to filter logs
	# coming into the same port
	if ($fromhost-ip startswith '192.168.100.') then {
		action(type="omfile" DynaFile="d_firewall_log")
		# Optionally, we can stop processing if a log matches the if statement
		stop
	}

	# Lets setup the catch all logging
	action(type="omfile" DynaFile="d_catch_all")
}

# A ruleset for just port 1514
ruleset(name="f_firewall") {
	action(type="omfile" DynaFile="d_firewall_log") 
}
ruleset(name="f_BlueCoat") {
	action(type="omfile" DynaFile="d_BlueCoat_log") 
}

ruleset(name="r_Rsyslog_stats")
{
        # We can also specify ownership in the action()
        action(type="omfile" fileOwner="splunk" fileGroup="splunk" dirOwner="splunk" dirGroup="splunk" DynaFile="d_Rsyslog_stats")
}
